package com.danielarroyo.congreso.infraestructura.presentacion;

import com.danielarroyo.congreso.infraestructura.controladores.SistemaController;
import com.danielarroyo.congreso.infraestructura.dto.*;
import com.danielarroyo.congreso.infraestructura.conexion.ConexionBD;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.util.List;
import javax.swing.Timer;

/**
 *
 * @author Steven
 */
public class DashboardPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form DashboardPrincipal
     */
    public DashboardPrincipal() {
        sistema = new SistemaController();
        initComponents();
        configurarVentana();
        configurarTabla();
        configurarConsultas();
        iniciarMonitoreo();
    }
    
    /**
     * Configurar propiedades de la ventana
     */
    private void configurarVentana() {
        setTitle("Sistema de Congreso - Dashboard de Consultas");
        setLocationRelativeTo(null);
    }

    /**
     * Configurar tabla de resultados
     */
    private void configurarTabla() {
        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablaResultados.setModel(modeloTabla);
    }

/**
 * Configurar consultas disponibles - LAS 43 CONSULTAS
 */
private void configurarConsultas() {
        comboConsultas.removeAllItems();
        
        // Opci√≥n por defecto
        comboConsultas.addItem(new ConsultaItem("-- SELECCIONA UNA CONSULTA --", "", ""));
        
        // === CONGRESISTAS (10 consultas) ===
        comboConsultas.addItem(new ConsultaItem("üìã Lista de potenciales asistentes registrados", "congresistas", "potenciales_asistentes"));
        comboConsultas.addItem(new ConsultaItem("üë• Informaci√≥n b√°sica de congresistas", "congresistas", "info_basica"));
        comboConsultas.addItem(new ConsultaItem("üì± Congresistas con tel√©fono m√≥vil", "congresistas", "con_telefono"));
        comboConsultas.addItem(new ConsultaItem("üèõÔ∏è Miembros del comit√© organizador", "congresistas", "comite_organizador"));
        comboConsultas.addItem(new ConsultaItem("‚ùå Asistentes sin registro en la aplicaci√≥n", "congresistas", "sin_registro"));
        comboConsultas.addItem(new ConsultaItem("üìù Congresistas registrados sin trabajos", "congresistas", "sin_trabajos"));
        comboConsultas.addItem(new ConsultaItem("ü™ë Asistentes que son chairman", "congresistas", "son_chairman"));
        comboConsultas.addItem(new ConsultaItem("üìû Sin direcci√≥n de correo electr√≥nico", "congresistas", "sin_email"));
        comboConsultas.addItem(new ConsultaItem("üî§ Congresistas por letra inicial", "congresistas", "por_letra"));
        comboConsultas.addItem(new ConsultaItem("üìÖ Registrados despu√©s de fecha espec√≠fica", "congresistas", "despues_fecha"));
        
        // === TRABAJOS (18 consultas) ===
        comboConsultas.addItem(new ConsultaItem("üìÑ Trabajos enviados por autor espec√≠fico", "trabajos", "por_autor"));
        comboConsultas.addItem(new ConsultaItem("‚úÖ Trabajos seleccionados para presentaci√≥n", "trabajos", "seleccionados"));
        comboConsultas.addItem(new ConsultaItem("üìä Trabajos seleccionados por sesi√≥n", "trabajos", "por_sesion"));
        comboConsultas.addItem(new ConsultaItem("‚è≥ Trabajos sin revisar por el comit√©", "trabajos", "sin_revisar"));
        comboConsultas.addItem(new ConsultaItem("üè´ Trabajos por instituci√≥n espec√≠fica", "trabajos", "por_institucion"));
        comboConsultas.addItem(new ConsultaItem("üîç Trabajos con palabras clave", "trabajos", "palabras_clave"));
        comboConsultas.addItem(new ConsultaItem("üì± Trabajos de autores con tel√©fono", "trabajos", "autores_telefono"));
        comboConsultas.addItem(new ConsultaItem("üìà Cantidad de trabajos por autor", "trabajos", "cantidad_por_autor"));
        comboConsultas.addItem(new ConsultaItem("üî¢ N√∫mero total de trabajos enviados", "trabajos", "total_enviados"));
        comboConsultas.addItem(new ConsultaItem("üèÜ Trabajos m√°s populares", "trabajos", "mas_populares"));
        comboConsultas.addItem(new ConsultaItem("üë• Autores con m√°s de un trabajo", "trabajos", "autores_multiples"));
        comboConsultas.addItem(new ConsultaItem("üìù Trabajos con resumen largo (>300)", "trabajos", "resumen_largo"));
        comboConsultas.addItem(new ConsultaItem("üî§ Trabajos ordenados por t√≠tulo", "trabajos", "ordenados_titulo"));
        comboConsultas.addItem(new ConsultaItem("‚ùå Autores sin trabajos registrados", "trabajos", "autores_sin_trabajos"));
        comboConsultas.addItem(new ConsultaItem("üé§ Trabajos de autores ponentes", "trabajos", "autores_ponentes"));
        
        // === COMIT√âS (4 consultas) ===
        comboConsultas.addItem(new ConsultaItem("üë®‚Äç‚öñÔ∏è Comit√© de selecci√≥n encargado", "comites", "comite_seleccion"));
        comboConsultas.addItem(new ConsultaItem("üìã Miembros del comit√© de selecci√≥n", "comites", "miembros_seleccion"));
        comboConsultas.addItem(new ConsultaItem("üèõÔ∏è Miembros del comit√© organizador", "comites", "miembros_organizador"));
        comboConsultas.addItem(new ConsultaItem("üé§ Ponentes miembros del comit√©", "comites", "ponentes_comite"));
        
        // === SESIONES (11 consultas) ===
        comboConsultas.addItem(new ConsultaItem("üìÖ Informaci√≥n de las sesiones", "sesiones", "info_sesiones"));
        comboConsultas.addItem(new ConsultaItem("üè¢ Salas designadas por sesi√≥n", "sesiones", "salas_sesion"));
        comboConsultas.addItem(new ConsultaItem("üìÜ Sesiones por d√≠a espec√≠fico", "sesiones", "por_dia"));
        comboConsultas.addItem(new ConsultaItem("üé§ Lista de ponentes por sesi√≥n", "sesiones", "ponentes_sesion"));
        comboConsultas.addItem(new ConsultaItem("üìã Ponentes y trabajos por sesi√≥n", "sesiones", "ponentes_trabajos"));
        comboConsultas.addItem(new ConsultaItem("üë§ Sesiones por chairman espec√≠fico", "sesiones", "por_chairman"));
        comboConsultas.addItem(new ConsultaItem("‚ÑπÔ∏è Chairman de sesi√≥n espec√≠fica", "sesiones", "chairman_sesion"));
        comboConsultas.addItem(new ConsultaItem("üèõÔ∏è Sesiones moderadas por comit√©", "sesiones", "moderadas_comite"));
        comboConsultas.addItem(new ConsultaItem("‚ùå Sesiones sin chairman designado", "sesiones", "sin_chairman"));
        comboConsultas.addItem(new ConsultaItem("üè¢ Sesiones sin sala asignada", "sesiones", "sin_sala"));
        comboConsultas.addItem(new ConsultaItem("üìâ Sesiones con menos de 3 trabajos", "sesiones", "menos_tres"));
        comboConsultas.addItem(new ConsultaItem("üóìÔ∏è Sesiones ordenadas por fecha/hora", "sesiones", "ordenadas_fecha"));
        
        // === ESTAD√çSTICAS Y AN√ÅLISIS ===
        comboConsultas.addItem(new ConsultaItem("üìä Sesiones con m√°s trabajos asignados", "estadisticas", "sesiones_mas_trabajos"));
        comboConsultas.addItem(new ConsultaItem("üìà Trabajos de la sesi√≥n m√°s popular", "estadisticas", "trabajos_sesion_popular"));
        comboConsultas.addItem(new ConsultaItem("üéØ Sesiones por √°rea de investigaci√≥n", "estadisticas", "sesiones_area"));
        comboConsultas.addItem(new ConsultaItem("‚ùå Autores que no son ponentes", "estadisticas", "autores_no_ponentes"));
        comboConsultas.addItem(new ConsultaItem("üîÑ Sesiones en d√≠a y sala espec√≠ficos", "estadisticas", "sesiones_dia_sala"));
        comboConsultas.addItem(new ConsultaItem("üìä Asistentes ordenados por apellido", "estadisticas", "asistentes_apellido"));
        comboConsultas.addItem(new ConsultaItem("üè∑Ô∏è Autores con nombres comunes", "estadisticas", "nombres_comunes"));
    }

    /**
     * Iniciar monitoreo del sistema
     */
    private void iniciarMonitoreo() {
        timerConexion = new Timer(5000, e -> {
            boolean conectado = ConexionBD.verificarConexion();
            lblEstadoSistema.setText(conectado ? "üü¢ Sistema Operativo" : "üî¥ Error de Conexi√≥n");
            lblEstadoSistema.setForeground(conectado ? new Color(34, 197, 94) : new Color(239, 68, 68));
        });
        timerConexion.start();
        timerConexion.getActionListeners()[0].actionPerformed(null);
    }

    /**
     * Manejar selecci√≥n de consulta
     */
    private void onConsultaSeleccionada() {
        ConsultaItem item = (ConsultaItem) comboConsultas.getSelectedItem();
        if (item != null && !item.categoria.isEmpty()) {
            btnEjecutar2.setEnabled(true);
        } else {
            btnEjecutar2.setEnabled(false);
        }
    }

    /**
     * Ejecutar la consulta seleccionada
     */
    private void ejecutarConsulta() {
        ConsultaItem item = (ConsultaItem) comboConsultas.getSelectedItem();
        if (item == null || item.categoria.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Por favor selecciona una consulta de la lista", 
                "Informaci√≥n", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        try {
            btnEjecutar2.setText("‚è≥ Ejecutando...");
            btnEjecutar2.setEnabled(false);
            
            // Ejecutar seg√∫n categor√≠a
            switch (item.categoria) {
                case "congresistas":
                    ejecutarConsultaCongresistas(item.tipo);
                    break;
                case "trabajos":
                    ejecutarConsultaTrabajos(item.tipo);
                    break;
                case "comites":
                    ejecutarConsultaComites(item.tipo);
                    break;
                case "sesiones":
                    ejecutarConsultaSesiones(item.tipo);
                    break;
                case "estadisticas":
                    ejecutarConsultaEstadisticas(item.tipo);
                    break;
            }
            
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Error al ejecutar consulta: " + e.getMessage(), 
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        } finally {
            btnEjecutar2.setText("üöÄ EJECUTAR");
            btnEjecutar2.setEnabled(true);
        }
    }


/**
 * Manejar selecci√≥n de consulta
 */


/**
     * IMPLEMENTAR EL BOT√ìN EJECUTAR
     */

/**
 * Ejecutar consultas de congresistas
 */
private void ejecutarConsultaCongresistas(String tipo) {
        List<CongresistaResponseDTO> resultados;
        String titulo;
        
        switch (tipo) {
            case "potenciales_asistentes":
            case "info_basica":
                resultados = sistema.getCongresistas().obtenerTodosCongresistas();
                titulo = "Informaci√≥n de Congresistas";
                break;
            case "con_telefono":
                resultados = sistema.getCongresistas().obtenerCongresistasConTelefono();
                titulo = "Congresistas con Tel√©fono M√≥vil";
                break;
            case "comite_organizador":
                resultados = sistema.getCongresistas().obtenerMiembrosComiteOrganizador();
                titulo = "Miembros del Comit√© Organizador";
                break;
            default:
                mostrarMensaje("Esta consulta ser√° implementada pr√≥ximamente");
                return;
        }
        
        mostrarResultadosCongresistas(resultados, titulo);
    }

/**
 * Ejecutar consultas de trabajos
 */
private void ejecutarConsultaTrabajos(String tipo) {
        List<TrabajoResponseDTO> resultados;
        String titulo;
        
        switch (tipo) {
            case "seleccionados":
                resultados = sistema.getTrabajos().obtenerTrabajosSeleccionados();
                titulo = "Trabajos Seleccionados para Presentaci√≥n";
                break;
            case "sin_revisar":
                resultados = sistema.getTrabajos().obtenerTrabajosSinRevisar();
                titulo = "Trabajos Sin Revisar";
                break;
            case "total_enviados":
                Long total = sistema.getTrabajos().contarTotalTrabajos();
                mostrarMensaje("Total de trabajos enviados: " + total);
                return;
            case "ordenados_titulo":
                resultados = sistema.getTrabajos().obtenerTrabajosOrdenadosPorTitulo();
                titulo = "Trabajos Ordenados por T√≠tulo";
                break;
            default:
                mostrarMensaje("Esta consulta ser√° implementada pr√≥ximamente");
                return;
        }
        
        mostrarResultadosTrabajos(resultados, titulo);
    }

/**
 * Ejecutar consultas de comit√©s
 */
private void ejecutarConsultaComites(String tipo) {
        switch (tipo) {
            case "miembros_seleccion":
            case "miembros_organizador":
                List<CongresistaResponseDTO> miembros = sistema.getCongresistas().obtenerMiembrosComiteOrganizador();
                mostrarResultadosCongresistas(miembros, "Miembros del Comit√©");
                break;
            default:
                mostrarMensaje("Esta consulta ser√° implementada pr√≥ximamente");
        }
    }

/**
 * Ejecutar consultas de sesiones
 */
private void ejecutarConsultaSesiones(String tipo) {
        List<SesionResponseDTO> resultados;
        String titulo;
        
        switch (tipo) {
            case "info_sesiones":
                resultados = sistema.getSesiones().obtenerTodasSesiones();
                titulo = "Informaci√≥n de Todas las Sesiones";
                break;
            case "sin_chairman":
                resultados = sistema.getSesiones().obtenerSesionesSinChairman();
                titulo = "Sesiones Sin Chairman Designado";
                break;
            case "sin_sala":
                resultados = sistema.getSesiones().obtenerSesionesSinSalaAsignada();
                titulo = "Sesiones Sin Sala Asignada";
                break;
            case "menos_tres":
                resultados = sistema.getSesiones().obtenerSesionesConMenosDeTresTrabajos();
                titulo = "Sesiones con Menos de 3 Trabajos";
                break;
            case "ordenadas_fecha":
                resultados = sistema.getSesiones().obtenerSesionesOrdenadasPorFechaHora();
                titulo = "Sesiones Ordenadas por Fecha y Hora";
                break;
            default:
                mostrarMensaje("Esta consulta ser√° implementada pr√≥ximamente");
                return;
        }
        
        mostrarResultadosSesiones(resultados, titulo);
    }

/**
 * Ejecutar consultas de estad√≠sticas
 */
private void ejecutarConsultaEstadisticas(String tipo) {
        switch (tipo) {
            case "sesiones_mas_trabajos":
                List<ConsultaResultadoDTO> sesionesPopulares = sistema.getSesiones().obtenerSesionesConMasTrabajos();
                mostrarResultadosEstadisticas(sesionesPopulares, "Sesiones con M√°s Trabajos");
                break;
            case "autores_multiples":
                List<ConsultaResultadoDTO> autoresActivos = sistema.getTrabajos().obtenerAutoresConMasTrabajos();
                mostrarResultadosEstadisticas(autoresActivos, "Autores con M√∫ltiples Trabajos");
                break;
            case "trabajos_sesion_popular":
                List<ConsultaResultadoDTO> trabajosPopulares = sistema.getTrabajos().obtenerTrabajosPopulares();
                mostrarResultadosEstadisticas(trabajosPopulares, "Trabajos M√°s Populares");
                break;
            default:
                mostrarMensaje("Esta consulta ser√° implementada pr√≥ximamente");
        }
    }

/**
 * Mostrar resultados de congresistas
 */
private void mostrarResultadosCongresistas(List<CongresistaResponseDTO> congresistas, String titulo) {
        modeloTabla.setRowCount(0);
        modeloTabla.setColumnCount(0);
        
        // Columnas
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Apellido");
        modeloTabla.addColumn("Instituci√≥n");
        modeloTabla.addColumn("Email");
        modeloTabla.addColumn("Tel√©fono");
        modeloTabla.addColumn("Miembro Comit√©");
        modeloTabla.addColumn("Organizador");
        
        // Datos
        for (CongresistaResponseDTO c : congresistas) {
            Object[] fila = {
                c.getCongresistaId(),
                c.getNombre(),
                c.getPrimerApellido(),
                c.getInstitucionAfiliada(),
                c.getEmail(),
                c.getTelefonoMovil() != null ? c.getTelefonoMovil() : "N/A",
                c.isEsMiembroComite() ? "S√≠" : "No",
                c.isEsOrganizador() ? "S√≠" : "No"
            };
            modeloTabla.addRow(fila);
        }
        
        lblTotalRegistros.setText("Total: " + congresistas.size() + " registros");
        mostrarMensaje(titulo + " - " + congresistas.size() + " resultados encontrados");
    }

/**
 * Mostrar resultados de trabajos
 */
private void mostrarResultadosTrabajos(List<TrabajoResponseDTO> trabajos, String titulo) {
    modeloTabla.setRowCount(0);
    modeloTabla.setColumnCount(0);
    
    // Columnas
    modeloTabla.addColumn("ID");
    modeloTabla.addColumn("T√≠tulo");
    modeloTabla.addColumn("Estado");
    modeloTabla.addColumn("Fecha Env√≠o");
    modeloTabla.addColumn("Palabras Clave");
    modeloTabla.addColumn("Palabras Resumen");
    
    // Datos
    for (TrabajoResponseDTO t : trabajos) {
        Object[] fila = {
            t.getTrabajoId(),
            t.getTitulo(),
            t.getEstado(),
            t.getFechaEnvio(),
            t.getPalabrasClave() != null ? t.getPalabrasClave() : "N/A",
            t.getCantidadPalabrasResumen()
        };
        modeloTabla.addRow(fila);
    }
    
    lblTotalRegistros.setText("Total: " + trabajos.size() + " registros");
    mostrarMensaje(titulo + " - " + trabajos.size() + " resultados encontrados");
}

/**
 * Mostrar resultados de sesiones
 */
private void mostrarResultadosSesiones(List<SesionResponseDTO> sesiones, String titulo) {
    modeloTabla.setRowCount(0);
    modeloTabla.setColumnCount(0);
    
    // Columnas
    modeloTabla.addColumn("ID");
    modeloTabla.addColumn("Nombre Sesi√≥n");
    modeloTabla.addColumn("Fecha");
    modeloTabla.addColumn("Hora Inicio");
    modeloTabla.addColumn("Hora Final");
    modeloTabla.addColumn("Estado");
    modeloTabla.addColumn("Sala");
    modeloTabla.addColumn("Duraci√≥n (min)");
    
    // Datos
    for (SesionResponseDTO s : sesiones) {
        Object[] fila = {
            s.getSesionId(),
            s.getNombreSesion(),
            s.getFecha(),
            s.getHoraInicio(),
            s.getHoraFinal(),
            s.getEstado(),
            s.getSalaId() != null ? "Sala " + s.getSalaId() : "Sin asignar",
            s.getDuracionMinutos()
        };
        modeloTabla.addRow(fila);
    }
    
    lblTotalRegistros.setText("Total: " + sesiones.size() + " registros");
    mostrarMensaje(titulo + " - " + sesiones.size() + " resultados encontrados");
}

/**
 * Mostrar resultados de estad√≠sticas
 */
private void mostrarResultadosEstadisticas(List<ConsultaResultadoDTO> estadisticas, String titulo) {
    modeloTabla.setRowCount(0);
        modeloTabla.setColumnCount(0);
        
        // Columnas din√°micas seg√∫n el tipo de estad√≠stica
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Descripci√≥n");
        modeloTabla.addColumn("Cantidad");
        modeloTabla.addColumn("Detalles");
        
        // Datos
        for (ConsultaResultadoDTO e : estadisticas) {
            Object[] fila = {
                e.getCongresistaId() != null ? e.getCongresistaId() : 
                e.getTrabajoId() != null ? e.getTrabajoId() : 
                e.getSesionId() != null ? e.getSesionId() : "-",
                e.getNombreCongresista() != null ? e.getNombreCongresista() :
                e.getTituloTrabajo() != null ? e.getTituloTrabajo() :
                e.getTituloSesion() != null ? e.getTituloSesion() : "N/A",
                e.getCantidad(),
                e.getDescripcion()
            };
            modeloTabla.addRow(fila);
    }
    
    lblTotalRegistros.setText("Total: " + estadisticas.size() + " registros");
    mostrarMensaje(titulo + " - " + estadisticas.size() + " resultados encontrados");
}

/**
 * Mostrar mensaje informativo
 */
private void mostrarMensaje(String mensaje) {
    javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Informaci√≥n", javax.swing.JOptionPane.INFORMATION_MESSAGE);
}

/**
 * Clase interna para items del combo
 */
private static class ConsultaItem {
    String nombre;
    String categoria;
    String tipo;
    
    public ConsultaItem(String nombre, String categoria, String tipo) {
        this.nombre = nombre;
        this.categoria = categoria;
        this.tipo = tipo;
    }
    
    @Override
    public String toString() {
        return nombre;
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboConsultas = new javax.swing.JComboBox<>();
        btnEjecutar2 = new javax.swing.JButton();
        tabla = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        lblEstadoSistema = new javax.swing.JLabel();
        lblTotalRegistros = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Congreso");
        setPreferredSize(new java.awt.Dimension(1200, 800));

        jLabel1.setText("Consulta:");

        comboConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboConsultasActionPerformed(evt);
            }
        });

        btnEjecutar2.setText("üöÄ EJECUTAR");
        btnEjecutar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEjecutar2)
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEjecutar2))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.setViewportView(tablaResultados);

        getContentPane().add(tabla, java.awt.BorderLayout.CENTER);

        lblEstadoSistema.setText("Estado del sistema");

        lblTotalRegistros.setText("Total: 0 registros");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(lblEstadoSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253)
                .addComponent(lblTotalRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstadoSistema)
                    .addComponent(lblTotalRegistros))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEjecutar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutar2ActionPerformed
        ejecutarConsulta();
    }//GEN-LAST:event_btnEjecutar2ActionPerformed

    private void comboConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboConsultasActionPerformed
        ConsultaItem item = (ConsultaItem) comboConsultas.getSelectedItem();
        if (item != null && !item.categoria.isEmpty()) {
            btnEjecutar2.setEnabled(true);
        } else {
            btnEjecutar2.setEnabled(false);
        }
    }//GEN-LAST:event_comboConsultasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar2;
    private javax.swing.JComboBox<ConsultaItem> comboConsultas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblEstadoSistema;
    private javax.swing.JLabel lblTotalRegistros;
    private javax.swing.JScrollPane tabla;
    private javax.swing.JTable tablaResultados;
    // End of variables declaration//GEN-END:variables
    private SistemaController sistema;
    private DefaultTableModel modeloTabla;
    private Timer timerConexion;



}
